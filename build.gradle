apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'com.moowork.grunt'
apply plugin: 'com.moowork.node'


group = 'org.ow2.proactive'
version = proactiveDashboardVersion


// Configure the maven repository deployment
install {
    repositories.mavenInstaller {
        // Set the version
        pom.version = proactiveDashboardVersion
        // Set the group/namespace for the maven repository deployment.
        pom.groupId = 'org.ow2.proactive'
        // Give the artifact a 'base name' (The version is added to the 'base name')
        pom.artifactId = 'automation-dashboard'
    }
}

buildscript {
    repositories {
        jcenter()
        maven {
            url "http://repository.activeeon.com/content/groups/proactive/"
        }
	    maven {
	          url "https://plugins.gradle.org/m2/"
	    }

}
    dependencies {
        classpath 'com.moowork.gradle:gradle-grunt-plugin:0.12'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.12'
    }
}

node {
    // Version of node to use.
    version = '14.16.0'

    // Version of npm to use.
    // npmVersion = '3.8.6'

    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}")
}

grunt {
    // Set the directory where Gruntfile.js should be found
    workDir = file("${project.projectDir}")

    // Whether colors should output on the terminal
    colors = true

    // Whether output from Grunt should be buffered - useful when running tasks in parallel
    bufferOutput = false
}

repositories {
   if (project.hasProperty('local')) {
       mavenLocal()
   }

   jcenter()
   maven {
       url "http://repository.activeeon.com/content/groups/proactive/"
   }
}

uploadArchives {
    repositories {
        mavenDeployer {
            snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                authentication(userName: "${System.getProperty('nexusUsername')}",
                        password: "${System.getProperty('nexusPassword')}")
            }
            repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                authentication(userName: "${System.getProperty('nexusUsername')}",
                        password: "${System.getProperty('nexusPassword')}")
            }
        }
    }
}

task packageDist(type: Zip) {
    from 'dist'
    dependsOn grunt_build
}

task packageDev(type: Zip) {
    from 'app'
    classifier 'dev'
}

task bowerInstall(type: NodeTask) {
    script = file('node_modules/bower/bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            '--allow-root',
            'install']
    inputs.files file('bower.json')
    outputs.files file('bower_components')
    dependsOn npmInstall
}

task buildEnterprise(type: GruntTask) {
  args = ["build", "--target=enterprise"]
}

task buildCommunity(type: GruntTask) {
  args = ["build", "--target=community"]
}

// delete dist folder with clean
clean {
    delete "${project.projectDir}/dist"
    delete "${project.projectDir}/.tmp"
    delete "${project.projectDir}/build"
    delete "${project.projectDir}/node_modules"
    delete "${project.projectDir}/bower_components"
    delete "${project.projectDir}/cloud-automation"
    delete "${project.projectDir}/job-planner-portal"
    delete "${project.projectDir}/generic-catalog-portal"
    delete "${project.projectDir}/notification-portal"
    delete "${project.projectDir}/cloud-watch-portal"
    delete "${project.projectDir}/job-analytics-portal"
}

artifacts {
    archives packageDist, packageDev
}

configurations {
    cloudAutomationDep
    jobPlannerDep
    genericCatalogDep
    notificationDep
    cloudWatchDep
    jobAnalyticsDep
}

dependencies {
    cloudAutomationDep "org.ow2.proactive:cloud-automation:$version@zip"
    jobPlannerDep "org.ow2.proactive:job-planner-portal:$version@zip"
    genericCatalogDep "org.ow2.proactive:generic-catalog-portal:$version@zip"
    notificationDep "org.ow2.proactive:notification-portal:$version@zip"
    cloudWatchDep "org.ow2.proactive:cloud-watch-portal:$version@zip"
    jobAnalyticsDep "org.ow2.proactive:job-analytics-portal:$version@zip"

    compile configurations.cloudAutomationDep
    compile configurations.jobPlannerDep
    compile configurations.genericCatalogDep
    compile configurations.notificationDep
    compile configurations.cloudWatchDep
    compile configurations.jobAnalyticsDep
}

task copyCloudAutomationDep(type: Copy) {
    from zipTree(configurations.cloudAutomationDep.singleFile)
    into "./cloud-automation/app"
}

task copyJobPlannerDep(type: Copy) {
    from zipTree(configurations.jobPlannerDep.singleFile)
    into "./job-planner-portal/app"
}

task copyGenericCatalogDep(type: Copy) {
    from zipTree(configurations.genericCatalogDep.singleFile)
    into "./generic-catalog-portal/app"
}

task copyNotificationDep(type: Copy) {
    from zipTree(configurations.notificationDep.singleFile)
    into "./notification-portal/app"
}

task copyCloudWatchDep(type: Copy) {
    from zipTree(configurations.cloudWatchDep.singleFile)
    into "./cloud-watch-portal/app"
}

task copyJobAnalyticsDep(type: Copy) {
    from zipTree(configurations.jobAnalyticsDep.singleFile)
    into "./job-analytics-portal/app"
}

copyCloudAutomationDep.dependsOn clean
copyJobPlannerDep.dependsOn copyCloudAutomationDep
copyGenericCatalogDep.dependsOn copyJobPlannerDep
copyNotificationDep.dependsOn copyGenericCatalogDep
copyCloudWatchDep.dependsOn copyNotificationDep
copyJobAnalyticsDep.dependsOn copyCloudWatchDep
grunt_build.dependsOn copyJobAnalyticsDep

// makes sure on each build that bower downloaded the dependencies
grunt_build.dependsOn 'bowerInstall'

// makes sure on each build that grunt is installed
grunt_build.dependsOn 'installGrunt'

// processes your package.json before running grunt build
grunt_build.dependsOn 'npmInstall'

// runs "grunt build" as part of your gradle build
build.dependsOn grunt_build